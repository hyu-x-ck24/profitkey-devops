pipeline {
    environment {
        GIT_BRANCH = "main"
        GITHUB_REPOSITORY_NAME = "profitkey-front"
        GITHUB_REPOSITORY = "github.com/profit-key/${env.GITHUB_REPOSITORY_NAME}.git"
        DOCKER_REPOSITORY = "dreamjh/profitkey-front"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_key')
        DOCKER_CONTAINER_NAME = 'dev-client-container'
        EC2_INSTANCE_NAME = 'DevSpringServer'
        REGION = 'ap-northeast-2'
    }
    agent any
    stages {
        stage('Setup') {
            steps {
                script {
                    IP_FILE_NAME = "${env.EC2_INSTANCE_NAME}_public_ip.txt"
                    IP_FILE_PATH = "/var/jenkins_home/IPListDir/${IP_FILE_NAME}"
                    target_IP = ""
                }
            }
        }
        stage('Call (AWS)get_publicIP Job') {
            steps {
                script {
                    def ec2Job = build job: '(AWS)get_publicIP', 
                                         wait: true,
                                         parameters: [
                                             string(name: 'region', value: env.REGION),
                                             string(name: 'ec2_name', value: env.EC2_INSTANCE_NAME)
                                         ]
                    if (ec2Job.result != 'SUCCESS') {
                        error "EC2 Ïù∏Ïä§ÌÑ¥Ïä§ IP Ï∞æÍ∏∞ ÏûëÏóÖ Ïã§Ìå®"
                    }
                }
            }
        }
        stage('Read IP Address') {
            steps {
                script {
                    if (fileExists(IP_FILE_PATH)) {
                        target_IP = readFile(IP_FILE_PATH).trim()
                        echo "IP Ï£ºÏÜå Í≤ÄÏÉâÎê®: ${target_IP}"
                    } else {
                        error "IP Ï£ºÏÜå ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
                    }
                }
            }
        }
        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github_key', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    git branch: env.GIT_BRANCH, url: "https://${GIT_USERNAME}:${GIT_PASSWORD}@${env.GITHUB_REPOSITORY}"
                }
            }
        }
        stage('Docker Hub Login') {
            steps {
                script {
                    sh "echo ${env.DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${env.DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                }
            }
        }
        stage('Cleaning up') {
            steps {
                script {
                    def prevBuildNumber = Integer.parseInt(BUILD_NUMBER) - 1
                    sh """
                    docker rmi ${env.DOCKER_REPOSITORY}:${prevBuildNumber} || true
                    docker system prune -af
                    """
                }
            }
        }
        // stage('Env Copy') {
        //     steps {
        //         script {
        //             sh "cp /var/jenkins_home/envs/profitkey/profitkey.sh ."
        //         }
        //     }
        // }
        stage('Build Image') {
            steps {
                sh "docker build -f ./dev.Dockerfile -t ${env.DOCKER_REPOSITORY}:${BUILD_NUMBER} -t ${env.DOCKER_REPOSITORY}:latest ./"
            }
        }
        stage('Deploy our image') { 
            steps { 
                script {
                    sh "docker push ${env.DOCKER_REPOSITORY}:${BUILD_NUMBER}"
                    sh "docker push ${env.DOCKER_REPOSITORY}:latest"
                }
            }
        }
        stage('SSH Target Server Docker Login And Service Deploy') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_key', passwordVariable: 'DOCKERHUB_PASS', usernameVariable: 'DOCKERHUB_USER')]) {
                        sshagent(credentials: ['jenkins-ssh-key']) {
                            sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${target_IP} '
                                echo "${DOCKERHUB_PASS}" | docker login --username "${DOCKERHUB_USER}" --password-stdin
                                docker system prune -af
                                docker pull ${env.DOCKER_REPOSITORY}:${BUILD_NUMBER};
                                docker rm -f ${DOCKER_CONTAINER_NAME} || true
                                docker run -itd --restart always --name ${DOCKER_CONTAINER_NAME} -p 4000:80 ${env.DOCKER_REPOSITORY}:${BUILD_NUMBER}
                            '
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            withCredentials([string(credentialsId: 'profitkey-client-log', variable: 'DISCORD')]) {
                discordSend description: "ÌîÑÎ°†Ìä∏(DEV)ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ï†ïÎ≥¥", 
                    footer: "https://dev.profitkey.click/swagger-ui/index.html Î≥¥Îü¨Í∞ÄÍ∏∞", 
                    link: env.BUILD_URL, result: currentBuild.currentResult, 
                    title: "üåü ÌîÑÎ°†Ìä∏(DEV)ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏÑ±Í≥µ!!! üåü", 
                    webhookURL: "$DISCORD"
                }
            }
        failure {
            withCredentials([string(credentialsId: 'profitkey-client-log', variable: 'DISCORD')]) {
                discordSend description: "ÌîÑÎ°†Ìä∏(DEV)ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïã§Ìå® Ï†ïÎ≥¥", 
                    footer: "ÎπåÎìúÍ∞Ä Í∞ÄÎä•Ìïú ÏÉÅÌÉúÏùºÍπåÏöî? „Ö†„Ö† ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî", 
                    link: env.BUILD_URL, result: currentBuild.currentResult, 
                    title: "üö® ÌîÑÎ°†Ìä∏(DEV)ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïã§Ìå®!!! üö®", 
                    webhookURL: "$DISCORD"
            }
        }
    }
}